name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: cicd-demo-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests (placeholder)
        run: echo "Tests would run here - npm test"

      - name: Lint code
        run: echo "Linting would run here - npm run lint"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 1: Set up Docker (required for kind)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # Step 2: Install kind
      - name: Set up kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: v0.20.0

      # Step 3: Create temporary kind cluster
      - name: Create kind cluster
        run: kind create cluster --name cicd-test

      # Step 4: Build Docker image and load into kind
      - name: Build Docker image and load into kind
        run: |
          docker build -t cicd-demo-app:latest .
          kind load docker-image cicd-demo-app:latest --name cicd-test

      # Step 5: Update Deployment with the built image
      - name: Update image tag in deployment
        run: |
          sed -i "s|YOUR_DOCKERHUB_USERNAME/cicd-demo-app:latest|cicd-demo-app:latest|g" k8s/deployment.yaml
          cat k8s/deployment.yaml

      # Step 6: Deploy manifests
      - name: Deploy to kind cluster
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/cicd-demo-app --timeout=300s

      # Step 7: Verify deployment
      - name: Verify deployment
        run: |
          kubectl get pods -l app=cicd-demo-app
          kubectl get services -l app=cicd-demo-app
          kubectl get ingress -l app=cicd-demo-app

  notify:
  needs: [test, build-and-push, deploy]
  runs-on: ubuntu-latest
  if: always()
  steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üöÄ App deployed to kind cluster"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi

